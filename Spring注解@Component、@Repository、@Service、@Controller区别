很长时间没做web项目都把以前学的那点框架知识忘光了，今天把以前做的一个项目翻出来看一下发现用·@Component标记一个组件，而网上有的用@Service标记组件，我晕就查了一下资料：

Spring 2.5 中除了提供 @Component 注释外，还定义了几个拥有特殊语义的注释，它们分别是：@Repository、@Service 和 @Controller。
在目前的 Spring 版本中，这 3 个注释和 @Component 是等效的，但是从注释类的命名上，很容易看出这 3 个注释分别和持久层、业务层和控制层（Web 层）相对应。
虽然目前这3 个注释和 @Component 相比没有什么新意，但 Spring 将在以后的版本中为它们添加特殊的功能。
所以，如果 Web 应用程序采用了经典的三层分层结构的话，最好在持久层、业务层和控制层分别采用上述注解对分层中的类进行注释。

@Service用于标注业务层组件

@Controller用于标注控制层组件（如struts中的action）

@Repository用于标注数据访问组件，即DAO组件

@Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。

[java] view plaincopyprint?
01.@Service  
02.public class VentorServiceImpl implements iVentorService {     
03.}  
04.@Repository  
05.public class VentorDaoImpl implements iVentorDao {   
06.}  
@Service
public class VentorServiceImpl implements iVentorService {   
}
@Repository
public class VentorDaoImpl implements iVentorDao { 
} 

在一个稍大的项目中，如果组件采用xml的bean定义来配置，显然会增加配置文件的体积，查找以及维护起来也不太方便。 
Spring2.5为我们引入了组件自动扫描机制，他在类路径下寻找标注了上述注解的类，并把这些类纳入进spring容器中管理。
它的作用和在xml文件中使用bean节点配置组件时一样的。要使用自动扫描机制，我们需要打开以下配置信息：

代码

[html] view plaincopyprint?
01.<?xml version="1.0" encoding="UTF-8" ?>   
02.<beans xmlns="http://www.springframework.org/schema/beans"  
03.    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
04.    xmlns:context="http://www.springframework.org/schema/context"  
05.    xsi:schemaLocation="http://www.springframework.org/schema/beans  
06.                http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  
07.        http://www.springframework.org/schema/context  
08.        http://www.springframework.org/schema/context/spring-context-2.5.xsd">   
09.     
10.    <context:annotation-config />  
11.    <context:component-scan base-package=”com.eric.spring”>     
12.</beans>   
<?xml version="1.0" encoding="UTF-8" ?> 
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-2.5.xsd"> 
   
	<context:annotation-config />
	<context:component-scan base-package=”com.eric.spring”>   
</beans> 1.annotation-config是对标记了 Spring's @Required、@Autowired、JSR250's @PostConstruct、@PreDestroy、@Resource、JAX-WS's @WebServiceRef、EJB3's @EJB、JPA's @PersistenceContext、@PersistenceUnit等注解的类进行对应的操作使注解生效。
2.base-package为需要扫描的包（含所有子包），负责扫描那些类有注解。

 

getBean的默认名称是类名（头字母小写），如果想自定义，可以@Service(“aaaaa”)这样来指定。
这种bean默认是“singleton”的，如果想改变，可以使用@Scope(“prototype”)来改变。

可以使用以下方式指定初始化方法和销毁方法：

[java] view plaincopyprint?
01.@PostConstruct  
02.public void init() {   
03.}   
04.@PreDestroy  
05.public void destory() {   
06.}   
@PostConstruct
public void init() { 
} 
@PreDestroy
public void destory() { 
} 
 

注入方式：

把DAO实现类注入到action的service接口(注意不要是service的实现类)中，注入时不要new 这个注入的类，因为spring会自动注入，如果手动再new的话会出现错误，
然后属性加上@Autowired后不需要getter()和setter()方法，Spring也会自动注入。   

在接口前面标上@Autowired注释使得接口可以被容器注入，如：

[java] view plaincopyprint?
01.@Autowired  
02.@Qualifier("chinese")  
03.private Man man;   
@Autowired
@Qualifier("chinese")
private Man man; 当接口存在两个实现类的时候必须使用@Qualifier指定注入哪个实现类，否则可以省略，只写@Autowired。

